{"version":3,"file":"worker.9e190674.js","sources":["../node_modules/scrypt-crate/scrypt_crate.js","../src/util/ranges.ts","../src/crypto/common.ts","../src/crypto/worker.ts"],"sourcesContent":["\nlet wasm;\n\nlet cachedUint8Memory0 = new Uint8Array();\n\nfunction getUint8Memory0() {\n    if (cachedUint8Memory0.byteLength === 0) {\n        cachedUint8Memory0 = new Uint8Array(wasm.memory.buffer);\n    }\n    return cachedUint8Memory0;\n}\n\nlet WASM_VECTOR_LEN = 0;\n\nfunction passArray8ToWasm0(arg, malloc) {\n    const ptr = malloc(arg.length * 1);\n    getUint8Memory0().set(arg, ptr / 1);\n    WASM_VECTOR_LEN = arg.length;\n    return ptr;\n}\n\nlet cachedInt32Memory0 = new Int32Array();\n\nfunction getInt32Memory0() {\n    if (cachedInt32Memory0.byteLength === 0) {\n        cachedInt32Memory0 = new Int32Array(wasm.memory.buffer);\n    }\n    return cachedInt32Memory0;\n}\n\nfunction getArrayU8FromWasm0(ptr, len) {\n    return getUint8Memory0().subarray(ptr / 1, ptr / 1 + len);\n}\n/**\n* @param {number} r\n* @param {number} n\n* @param {number} p\n* @param {Uint8Array} passphrase\n* @param {Uint8Array} salt\n* @param {number} out_size\n* @returns {Uint8Array}\n*/\nexport function derive(r, n, p, passphrase, salt, out_size) {\n    try {\n        const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n        const ptr0 = passArray8ToWasm0(passphrase, wasm.__wbindgen_malloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ptr1 = passArray8ToWasm0(salt, wasm.__wbindgen_malloc);\n        const len1 = WASM_VECTOR_LEN;\n        wasm.derive(retptr, r, n, p, ptr0, len0, ptr1, len1, out_size);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        var v2 = getArrayU8FromWasm0(r0, r1).slice();\n        wasm.__wbindgen_free(r0, r1 * 1);\n        return v2;\n    } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n}\n\n/**\n* @param {Uint8Array} aes_key\n* @param {Uint8Array} mac_key\n* @param {Uint8Array} iv\n* @param {Uint8Array} payload\n* @returns {Uint8Array}\n*/\nexport function encrypt(aes_key, mac_key, iv, payload) {\n    try {\n        const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n        const ptr0 = passArray8ToWasm0(aes_key, wasm.__wbindgen_malloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ptr1 = passArray8ToWasm0(mac_key, wasm.__wbindgen_malloc);\n        const len1 = WASM_VECTOR_LEN;\n        const ptr2 = passArray8ToWasm0(iv, wasm.__wbindgen_malloc);\n        const len2 = WASM_VECTOR_LEN;\n        const ptr3 = passArray8ToWasm0(payload, wasm.__wbindgen_malloc);\n        const len3 = WASM_VECTOR_LEN;\n        wasm.encrypt(retptr, ptr0, len0, ptr1, len1, ptr2, len2, ptr3, len3);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        var v4 = getArrayU8FromWasm0(r0, r1).slice();\n        wasm.__wbindgen_free(r0, r1 * 1);\n        return v4;\n    } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n}\n\n/**\n* @param {Uint8Array} aes_key\n* @param {Uint8Array} mac_key\n* @param {Uint8Array} payload\n* @returns {Uint8Array | undefined}\n*/\nexport function decrypt(aes_key, mac_key, payload) {\n    try {\n        const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n        const ptr0 = passArray8ToWasm0(aes_key, wasm.__wbindgen_malloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ptr1 = passArray8ToWasm0(mac_key, wasm.__wbindgen_malloc);\n        const len1 = WASM_VECTOR_LEN;\n        const ptr2 = passArray8ToWasm0(payload, wasm.__wbindgen_malloc);\n        const len2 = WASM_VECTOR_LEN;\n        wasm.decrypt(retptr, ptr0, len0, ptr1, len1, ptr2, len2);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        let v3;\n        if (r0 !== 0) {\n            v3 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n        }\n        return v3;\n    } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n}\n\n/**\n* @param {Uint8Array} aes_key\n* @param {Uint8Array} payload\n* @returns {Uint8Array | undefined}\n*/\nexport function decrypt_legacy(aes_key, payload) {\n    try {\n        const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n        const ptr0 = passArray8ToWasm0(aes_key, wasm.__wbindgen_malloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ptr1 = passArray8ToWasm0(payload, wasm.__wbindgen_malloc);\n        const len1 = WASM_VECTOR_LEN;\n        wasm.decrypt_legacy(retptr, ptr0, len0, ptr1, len1);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        let v2;\n        if (r0 !== 0) {\n            v2 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n        }\n        return v2;\n    } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n}\n\nasync function load(module, imports) {\n    if (typeof Response === 'function' && module instanceof Response) {\n        if (typeof WebAssembly.instantiateStreaming === 'function') {\n            try {\n                return await WebAssembly.instantiateStreaming(module, imports);\n\n            } catch (e) {\n                if (module.headers.get('Content-Type') != 'application/wasm') {\n                    console.warn(\"`WebAssembly.instantiateStreaming` failed because your server does not serve wasm with `application/wasm` MIME type. Falling back to `WebAssembly.instantiate` which is slower. Original error:\\n\", e);\n\n                } else {\n                    throw e;\n                }\n            }\n        }\n\n        const bytes = await module.arrayBuffer();\n        return await WebAssembly.instantiate(bytes, imports);\n\n    } else {\n        const instance = await WebAssembly.instantiate(module, imports);\n\n        if (instance instanceof WebAssembly.Instance) {\n            return { instance, module };\n\n        } else {\n            return instance;\n        }\n    }\n}\n\nfunction getImports() {\n    const imports = {};\n    imports.wbg = {};\n\n    return imports;\n}\n\nfunction initMemory(imports, maybe_memory) {\n\n}\n\nfunction finalizeInit(instance, module) {\n    wasm = instance.exports;\n    init.__wbindgen_wasm_module = module;\n    cachedInt32Memory0 = new Int32Array();\n    cachedUint8Memory0 = new Uint8Array();\n\n\n    return wasm;\n}\n\nfunction initSync(module) {\n    const imports = getImports();\n\n    initMemory(imports);\n\n    if (!(module instanceof WebAssembly.Module)) {\n        module = new WebAssembly.Module(module);\n    }\n\n    const instance = new WebAssembly.Instance(module, imports);\n\n    return finalizeInit(instance, module);\n}\n\nasync function init(input) {\n    if (typeof input === 'undefined') {\n        input = \"/assets/scrypt_crate_bg.wasm\"\n    }\n    const imports = getImports();\n\n    if (typeof input === 'string' || (typeof Request === 'function' && input instanceof Request) || (typeof URL === 'function' && input instanceof URL)) {\n        input = fetch(input);\n    }\n\n    initMemory(imports);\n\n    const { instance, module } = await load(await input, imports);\n\n    return finalizeInit(instance, module);\n}\n\nexport { initSync }\nexport default init;\n","export function flatten(str: string): ReadonlyArray<string> {\n  if (/\\s/.test(str)) {\n    throw new Error('Can\\'t contain whitespace');\n  }\n\n  // a-zA-Z\n  str = str.replace(/(\\w)-(\\w)/g, (range, from, to) => {\n    const fromCode = from.charCodeAt(0);\n    const toCode = to.charCodeAt(0);\n\n    if (from.length !== 1 || fromCode > 0xff) {\n      throw new Error(`Invalid starting character in range \"${range}\"`);\n    }\n    if (to.length !== 1 || toCode > 0xff) {\n      throw new Error(`Invalid ending character in range \"${range}\"`);\n    }\n\n    if (fromCode > toCode) {\n      throw new Error(`Invalid range \"${range}\"`);\n    }\n\n    let res = '';\n    for (let code = fromCode; code <= toCode; code++) {\n      res += String.fromCharCode(code);\n    }\n    return res;\n  });\n\n  // Report invalid ranges\n  str.replace(/[^\\\\]-|[^\\\\]-\\W|^-\\W|^-\\w?/, (invalid) => {\n    throw new Error(`Unterminated range \"${invalid}\"`);\n  });\n\n  // Unescape `\\x` => `x`\n  str = str.replace(/\\\\(.)/g, '$1');\n\n  return Array.from(new Set(str.split(''))).sort();\n}\n\nexport function check(str: string): boolean {\n  try {\n    flatten(str);\n    return true;\n  } catch (error) {\n    return false;\n  }\n}\n","import init from 'scrypt-crate';\n\nexport type Keys = Readonly<{\n  master: string;\n  aes: Uint8Array;\n  hmac: Uint8Array;\n}>;\n\nexport type PasswordOptions = Readonly<{\n  requiredChars: string;\n  allowedChars: string;\n  passwordLen: number;\n}>;\n\nexport type PasswordRanges = Readonly<{\n  required: ReadonlyArray<string>;\n  allowed: ReadonlyArray<string>;\n  union: ReadonlyArray<string>;\n  passwordLen: number;\n}>;\n\n\nexport const DEFAULT_OPTIONS: PasswordOptions = {\n  allowedChars: 'a-zA-Z0-9_.',\n  requiredChars: '',\n  passwordLen: 24,\n};\n\n// NOTE: this is upper bound for an entropy, lower bound depends on the size\n// of `required` array.\n\nexport function passwordEntropyBits(\n  { union, passwordLen }: PasswordRanges,\n): number {\n  return Math.ceil(Math.log2(union.length) * passwordLen);\n}\n\nexport function isDefaultOptions({\n  allowedChars,\n  requiredChars,\n  passwordLen,\n}: PasswordOptions): boolean {\n  return allowedChars === DEFAULT_OPTIONS.allowedChars &&\n    requiredChars === DEFAULT_OPTIONS.requiredChars &&\n    passwordLen === DEFAULT_OPTIONS.passwordLen;\n}\n\nfunction alpha(ch: number): number {\n  // 0-9\n  if (ch >= 0x30 && ch <= 0x39) {\n    return ch - 0x30;\n  } else if (ch >= 0x41 && ch <= 0x46) {\n    return ch - 0x41 + 10;\n  } else if (ch >= 0x61 && ch <= 0x66) {\n    return ch - 0x61 + 10;\n  } else {\n    throw new Error('Not a hex character, code: ' + ch);\n  }\n}\n\nexport function fromHex(hex: string): Uint8Array {\n  if (hex.length % 2 !== 0) {\n    throw new Error(`Invalid hex: \"${hex}\"`);\n  }\n\n  const out = new Uint8Array(hex.length / 2);\n  for (let i = 0; i < hex.length; i += 2) {\n    const hi = alpha(hex.charCodeAt(i));\n    const lo = alpha(hex.charCodeAt(i + 1));\n\n    out[i >> 1] = (hi << 4) | lo;\n  }\n  return out;\n}\n\nexport function toHex(buf: Uint8Array): string {\n  let res = '';\n  for (let i = 0; i < buf.length; i++) {\n    let d = buf[i].toString(16);\n    if (d.length < 2) {\n      d = '0' + d;\n    }\n    res += d;\n  }\n  return res;\n}\n\nexport const initPromise = init();\n","import { derive } from 'scrypt-crate';\n\nimport { flatten } from '../util/ranges';\nimport type { Application } from '../stores/schemas';\nimport {\n  initPromise,\n  toHex,\n  isDefaultOptions,\n  passwordEntropyBits,\n  type Keys,\n  type PasswordRanges,\n} from './common';\n\nconst encoder = new TextEncoder();\n\nconst SCRYPT_R = 8;\nconst SCRYPT_N = 32768;\nconst SCRYPT_P = 4;\n\nconst AES_KEY_SIZE = 32;\nconst MAC_KEY_SIZE = 64;\n\nconst SCRYPT_AES_DOMAIN = encoder.encode('derivepass/aes');\n\nfunction toPassword(\n  raw: Uint8Array,\n  { required: requiredArr, passwordLen, allowed, union }: PasswordRanges,\n): string {\n  const littleEndian = new Uint8Array([...raw].reverse());\n  let num = BigInt('0x' + toHex(littleEndian));\n\n  const required = new Set(requiredArr);\n\n  let out = '';\n  while (out.length < passwordLen) {\n    let alphabet: ReadonlyArray<string>;\n\n    // Emitted all required chars, move to allowed\n    if (required.size === 0) {\n      alphabet = allowed;\n\n    // Remaining space has to be filled with required chars\n    } else if (required.size === passwordLen - out.length) {\n      alphabet = Array.from(required);\n\n    // Just emit any chars\n    } else {\n      alphabet = union;\n    }\n\n    const mod = BigInt(alphabet.length);\n    const ch = alphabet[Number(num % mod)];\n    num = num / mod;\n\n    required.delete(ch);\n    out += ch;\n  }\n\n  return out;\n}\n\nconst LEGACY_PASSWORD_SIZE = 18;\n\nconst PASSWORD_BASE64 =\n  'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789_.'.split('');\n\nfunction toLegacyPassword(raw: Uint8Array): string {\n  if (raw.length !== LEGACY_PASSWORD_SIZE) {\n    throw new Error('Invalid raw bytes');\n  }\n\n  let out = '';\n  for (let i = 0; i < raw.length; i += 3) {\n    const a = raw[i];\n    const b = raw[i + 1];\n    const c = raw[i + 2];\n\n    out += PASSWORD_BASE64[a >>> 2];\n    out += PASSWORD_BASE64[((a & 3) << 4) | (b >>> 4)];\n    out += PASSWORD_BASE64[((b & 0x0f) << 2) | (c >>> 6)];\n    out += PASSWORD_BASE64[c & 0x3f];\n  }\n\n  return out;\n}\n\nexport function computePassword(\n  { master }: Keys,\n  app: Application,\n): string {\n  const source = `${app.domain}/${app.login}` +\n    `${app.revision > 1 ? `#${app.revision}` : ''}`;\n\n  const allowed = flatten(app.allowedChars);\n  const required = flatten(app.requiredChars);\n  const union = [...new Set([...allowed, ...required])].sort();\n\n  const ranges = {\n    allowed,\n    required,\n    union,\n    passwordLen: app.passwordLen,\n  };\n\n  const bytes = Math.ceil(passwordEntropyBits(ranges) / 8);\n  const raw = derive(\n    SCRYPT_R, SCRYPT_N, SCRYPT_P,\n    encoder.encode(master),\n    encoder.encode(source),\n    bytes);\n\n  if (isDefaultOptions(app)) {\n    return toLegacyPassword(raw);\n  }\n  return toPassword(raw, ranges);\n}\n\nexport function computeKeys(master: string): Keys {\n  const buf = derive(\n    SCRYPT_R, SCRYPT_N, SCRYPT_P,\n    encoder.encode(master),\n    SCRYPT_AES_DOMAIN,\n    AES_KEY_SIZE + MAC_KEY_SIZE);\n\n  return {\n    master,\n    aes: buf.slice(0, AES_KEY_SIZE),\n    hmac: buf.slice(AES_KEY_SIZE),\n  };\n}\n\nexport type WorkerRequest = Readonly<{\n  type: 'computeKeys';\n  master: string;\n} | {\n  type: 'computePassword';\n  keys: Keys;\n  app: Application;\n}>;\n\nexport type WorkerResponse = Readonly<{\n  type: 'computeKeys';\n  result: Keys;\n} | {\n  type: 'computePassword';\n  result: string;\n}>;\n\nonmessage = async (e) => {\n  await initPromise;\n\n  const data: WorkerRequest = e.data;\n\n  let res: WorkerResponse;\n  if (data.type === 'computeKeys') {\n    res = { type: 'computeKeys', result: computeKeys(data.master) };\n  } else {\n    res = {\n      type: 'computePassword',\n      result: computePassword(data.keys, data.app),\n    };\n  }\n  postMessage(res);\n};\n"],"names":["wasm","cachedUint8Memory0","getUint8Memory0","WASM_VECTOR_LEN","passArray8ToWasm0","arg","malloc","ptr","cachedInt32Memory0","getInt32Memory0","getArrayU8FromWasm0","len","derive","r","n","p","passphrase","salt","out_size","retptr","ptr0","len0","ptr1","len1","r0","r1","v2","load","module","imports","e","bytes","instance","getImports","finalizeInit","init","input","flatten","str","range","from","to","fromCode","toCode","res","code","invalid","DEFAULT_OPTIONS","passwordEntropyBits","union","passwordLen","isDefaultOptions","allowedChars","requiredChars","toHex","buf","i","d","initPromise","encoder","SCRYPT_R","SCRYPT_N","SCRYPT_P","AES_KEY_SIZE","MAC_KEY_SIZE","SCRYPT_AES_DOMAIN","toPassword","raw","requiredArr","allowed","littleEndian","num","required","out","alphabet","mod","ch","LEGACY_PASSWORD_SIZE","PASSWORD_BASE64","toLegacyPassword","a","b","c","computePassword","master","app","source","ranges","computeKeys","data"],"mappings":"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"}